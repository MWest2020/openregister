"use strict";(self.webpackChunkopen_register_docs=self.webpackChunkopen_register_docs||[]).push([[413],{3735:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>o});var a=n(8168),r=(n(6540),n(5680));const l={},i="Advanced Search",s={unversionedId:"advanced-search",id:"advanced-search",title:"Advanced Search",description:"Open Register provides powerful search capabilities that allow filtering objects based on their properties using a flexible query syntax.",source:"@site/docs/advanced-search.md",sourceDirName:".",slug:"/advanced-search",permalink:"/docs/advanced-search",draft:!1,editUrl:"https://github.com/conductionnl/openregister/tree/main/website/docs/advanced-search.md",tags:[],version:"current",frontMatter:{}},p={},o=[{value:"Overview",id:"overview",level:2},{value:"Full Text Search",id:"full-text-search",level:2},{value:"Wildcard Search",id:"wildcard-search",level:3},{value:"Pattern Matching",id:"pattern-matching",level:3},{value:"Phrase Search",id:"phrase-search",level:3},{value:"Basic Search",id:"basic-search",level:2},{value:"Comparison Operators",id:"comparison-operators",level:2},{value:"Not Equals (!=)",id:"not-equals-",level:3},{value:"Greater Than (&gt;)",id:"greater-than-",level:3},{value:"Less Than (&lt;)",id:"less-than-",level:3},{value:"Greater Than or Equal (&gt;=)",id:"greater-than-or-equal-",level:3},{value:"Less Than or Equal (&lt;=)",id:"less-than-or-equal-",level:3},{value:"Contains (~)",id:"contains-",level:3},{value:"Starts With (^)",id:"starts-with-",level:3},{value:"Ends With ($)",id:"ends-with-",level:3},{value:"Combining Multiple Conditions",id:"combining-multiple-conditions",level:2},{value:"AND Operations",id:"and-operations",level:3},{value:"OR Operations",id:"or-operations",level:3},{value:"Special Filters",id:"special-filters",level:2},{value:"Exists Check",id:"exists-check",level:3},{value:"Empty Check",id:"empty-check",level:3},{value:"Null Check",id:"null-check",level:3},{value:"Between Range",id:"between-range",level:3},{value:"Searching Nested Properties",id:"searching-nested-properties",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Related Features",id:"related-features",level:2}],g={toc:o},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.yg)(c,(0,a.A)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"advanced-search"},"Advanced Search"),(0,r.yg)("p",null,"Open Register provides powerful search capabilities that allow filtering objects based on their properties using a flexible query syntax."),(0,r.yg)("h2",{id:"overview"},"Overview"),(0,r.yg)("p",null,"The search system enables you to filter objects using query parameters. However, it's important to note that this approach is limited by the maximum URL length supported by browsers and servers (typically 2,048 characters for most browsers)."),(0,r.yg)("p",null,"For more complex queries that exceed URL length limitations, we are planning to implement GraphQL support in the future. This would enable:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Deeply nested queries"),(0,r.yg)("li",{parentName:"ul"},"Complex filtering logic"),(0,r.yg)("li",{parentName:"ul"},"Precise field selection"),(0,r.yg)("li",{parentName:"ul"},"Batch operations"),(0,r.yg)("li",{parentName:"ul"},"Real-time subscriptions")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Note: GraphQL implementation is currently pending funding. If you're interested in supporting this feature, please contact us.")),(0,r.yg)("p",null,"In the meantime, here are the available search capabilities using URL parameters:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Operator"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"),(0,r.yg)("th",{parentName:"tr",align:null},"Example"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"="),(0,r.yg)("td",{parentName:"tr",align:null},"Equals (case insensitive)"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"name=nemo"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"!="),(0,r.yg)("td",{parentName:"tr",align:null},"Not equals (case insensitive)"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"name[!=]=nemo"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},">"),(0,r.yg)("td",{parentName:"tr",align:null},"Greater than"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"age[>]=5"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"<"),(0,r.yg)("td",{parentName:"tr",align:null},"Less than"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"weight[<]=10"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},">="),(0,r.yg)("td",{parentName:"tr",align:null},"Greater than or equal"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"age[>=]=2"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"<="),(0,r.yg)("td",{parentName:"tr",align:null},"Less than or equal"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"age[<=]=10"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"~"),(0,r.yg)("td",{parentName:"tr",align:null},"Contains (case insensitive)"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"name[~]=ne"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"^"),(0,r.yg)("td",{parentName:"tr",align:null},"Starts with (case insensitive)"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"name[^]=ne"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"$"),(0,r.yg)("td",{parentName:"tr",align:null},"Ends with (case insensitive)"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"name[$]=mo"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"==="),(0,r.yg)("td",{parentName:"tr",align:null},"Equals (case sensitive)"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"name[===]=Nemo"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"exists"),(0,r.yg)("td",{parentName:"tr",align:null},"Property exists check"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"microchip[exists]=true"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"empty"),(0,r.yg)("td",{parentName:"tr",align:null},"Empty value check"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"notes[empty]=true"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"null"),(0,r.yg)("td",{parentName:"tr",align:null},"Null value check"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"owner[null]=true"))))),(0,r.yg)("h2",{id:"full-text-search"},"Full Text Search"),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"_search")," parameter allows searching across all text properties of objects in a case-insensitive way:"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"GET /api/pets?_search=nemo")),(0,r.yg)("p",null,'This searches for "nemo" in all text fields like name, description, notes etc.'),(0,r.yg)("h3",{id:"wildcard-search"},"Wildcard Search"),(0,r.yg)("p",null,"You can use wildcards in the search term:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"*")," matches zero or more characters\n",(0,r.yg)("inlineCode",{parentName:"p"},"GET /api/pets?_search=ne*o"),'\nMatches "nemo", "negro", "neuro" etc.')),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"?")," matches exactly one character\n",(0,r.yg)("inlineCode",{parentName:"p"},"GET /api/pets?_search=ne?o"),'\nMatches "nemo", "nero" but not "neuro"'))),(0,r.yg)("h3",{id:"pattern-matching"},"Pattern Matching"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"^")," matches start of text\n",(0,r.yg)("inlineCode",{parentName:"p"},"GET /api/pets?_search=^ne"),'\nMatches text starting with "ne"')),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"$")," matches end of text\n",(0,r.yg)("inlineCode",{parentName:"p"},"GET /api/pets?_search=mo$"),'\nMatches text ending with "mo"'))),(0,r.yg)("h3",{id:"phrase-search"},"Phrase Search"),(0,r.yg)("p",null,"Use quotes for exact phrase matching:\n",(0,r.yg)("inlineCode",{parentName:"p"},'GET /api/pets?_search="orange fish"'),'\nMatches the exact phrase "orange fish"'),(0,r.yg)("h2",{id:"basic-search"},"Basic Search"),(0,r.yg)("p",null,"Simple equals search (case insensitive):\n",(0,r.yg)("inlineCode",{parentName:"p"},"GET /api/pets?name=nemo")),(0,r.yg)("p",null,'This returns all pets named "nemo", "Nemo", "NEMO", etc.'),(0,r.yg)("p",null,"Case sensitive search:\n",(0,r.yg)("inlineCode",{parentName:"p"},"GET /api/pets?name[===]=Nemo")),(0,r.yg)("p",null,'This returns only pets named exactly "Nemo".'),(0,r.yg)("h2",{id:"comparison-operators"},"Comparison Operators"),(0,r.yg)("h3",{id:"not-equals-"},"Not Equals (!=)"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"GET /api/pets?name[!=]=nemo"),'\nReturns all pets NOT named "nemo" (case insensitive)'),(0,r.yg)("h3",{id:"greater-than-"},"Greater Than (>)"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"GET /api/pets?age[>]=5"),"\nReturns pets older than 5 years"),(0,r.yg)("h3",{id:"less-than-"},"Less Than (<)"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"GET /api/pets?weight[<]=10"),"\nReturns pets weighing less than 10kg"),(0,r.yg)("h3",{id:"greater-than-or-equal-"},"Greater Than or Equal (>=)"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"GET /api/pets?age[>=]=2"),"\nReturns pets 2 years or older"),(0,r.yg)("h3",{id:"less-than-or-equal-"},"Less Than or Equal (<=)"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"GET /api/pets?age[<=]=10"),"\nReturns pets 10 years or younger"),(0,r.yg)("h3",{id:"contains-"},"Contains (~)"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"GET /api/pets?name[~]=ne"),'\nReturns pets with "ne" in their name (like "nemo", "nero", "Nemo", etc) - case insensitive'),(0,r.yg)("h3",{id:"starts-with-"},"Starts With (^)"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"GET /api/pets?name[^]=ne"),'\nReturns pets whose names start with "ne" (case insensitive)'),(0,r.yg)("h3",{id:"ends-with-"},"Ends With ($)"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"GET /api/pets?name[$]=mo"),'\nReturns pets whose names end with "mo" (case insensitive)'),(0,r.yg)("h2",{id:"combining-multiple-conditions"},"Combining Multiple Conditions"),(0,r.yg)("h3",{id:"and-operations"},"AND Operations"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"GET /api/pets?name=nemo&type=fish"),'\nReturns pets named "nemo" (case insensitive) AND of type "fish"'),(0,r.yg)("h3",{id:"or-operations"},"OR Operations"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"GET /api/pets?name[]=nemo&name[]=dory"),'\nReturns pets named either "nemo" OR "dory" (case insensitive)'),(0,r.yg)("h2",{id:"special-filters"},"Special Filters"),(0,r.yg)("h3",{id:"exists-check"},"Exists Check"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"GET /api/pets?microchip[exists]=true"),"\nReturns pets that have a microchip property"),(0,r.yg)("h3",{id:"empty-check"},"Empty Check"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"GET /api/pets?notes[empty]=true"),"\nReturns pets with empty notes"),(0,r.yg)("h3",{id:"null-check"},"Null Check"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"GET /api/pets?owner[null]=true"),"\nReturns pets with no owner"),(0,r.yg)("h3",{id:"between-range"},"Between Range"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"GET /api/pets?age[>=]=2&age[<=]=5"),"\nReturns pets between 2 and 5 years old (inclusive)"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"GET /api/pets?age[>]=2&age[<]=5"),"\nReturns pets between 2 and 5 years old (exclusive)"),(0,r.yg)("h2",{id:"searching-nested-properties"},"Searching Nested Properties"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"GET /api/pets?owner.city=Amsterdam"),"\nReturns pets whose owners live in Amsterdam (case insensitive)"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"GET /api/pets?vaccinations.date[>]=2023-01-01"),"\nReturns pets with vaccinations after January 1st, 2023"),(0,r.yg)("h2",{id:"best-practices"},"Best Practices"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"Use URL encoding for special characters"),(0,r.yg)("li",{parentName:"ol"},"Keep queries focused and specific"),(0,r.yg)("li",{parentName:"ol"},"Use pagination for large result sets"),(0,r.yg)("li",{parentName:"ol"},"Consider URL length limitations"),(0,r.yg)("li",{parentName:"ol"},"Break complex queries into multiple requests if needed")),(0,r.yg)("h2",{id:"related-features"},"Related Features"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/automatic-facets"},"Automatic Facets")," - Combine with faceted search"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/elasticsearch"},"Elasticsearch")," - Advanced search capabilities "),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/content-search"},"Content Search")," - Full-text search integration"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"/docs/access-control"},"Access Control")," - Security for search results")))}d.isMDXComponent=!0},5680:(e,t,n)=>{n.d(t,{xA:()=>g,yg:()=>y});var a=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),o=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},g=function(e){var t=o(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,g=s(e,["components","mdxType","originalType","parentName"]),c=o(n),u=r,y=c["".concat(p,".").concat(u)]||c[u]||d[u]||l;return n?a.createElement(y,i(i({ref:t},g),{},{components:n})):a.createElement(y,i({ref:t},g))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var o=2;o<l;o++)i[o]=n[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);