"use strict";(self.webpackChunkopen_catalogi_docs=self.webpackChunkopen_catalogi_docs||[]).push([[159],{969:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"technical/import-export","title":"Import and Export","description":"The OpenRegister application supports importing and exporting of configuration data in JSON format.","source":"@site/docs/technical/import-export.md","sourceDirName":"technical","slug":"/technical/import-export","permalink":"/docs/technical/import-export","draft":false,"unlisted":false,"editUrl":"https://github.com/conductionnl/openregister/tree/main/website/docs/technical/import-export.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/docs/intro"},"next":{"title":"Importing and Exporting Data","permalink":"/docs/user/import-export"}}');var i=t(4848),o=t(8453);const a={},s="Import and Export",c={},d=[{value:"Import",id:"import",level:2},{value:"Import Parameters",id:"import-parameters",level:3},{value:"JSON Format",id:"json-format",level:3},{value:"Response Format",id:"response-format",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Example Usage",id:"example-usage",level:3},{value:"Export",id:"export",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"import-and-export",children:"Import and Export"})}),"\n",(0,i.jsx)(n.p,{children:"The OpenRegister application supports importing and exporting of configuration data in JSON format."}),"\n",(0,i.jsx)(n.h2,{id:"import",children:"Import"}),"\n",(0,i.jsxs)(n.p,{children:["The OpenRegister application supports importing configuration data in JSON format. The import functionality is handled by the ",(0,i.jsx)(n.code,{children:"ConfigurationService::importFromJson()"})," method."]}),"\n",(0,i.jsx)(n.h3,{id:"import-parameters",children:"Import Parameters"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"jsonData"})," (string): A JSON string containing the configuration data to import"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"includeObjects"})," (boolean, optional): Whether to include objects in the import (default: false)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"owner"})," (string, optional): The owner to assign to the imported data (default: '')"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"json-format",children:"JSON Format"}),"\n",(0,i.jsx)(n.p,{children:"The import JSON should follow this structure:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "schemas": [\n    {\n      "name": "string",\n      "description": "string",\n      "fields": [\n        {\n          "name": "string",\n          "type": "string",\n          "required": boolean,\n          "description": "string"\n        }\n      ],\n      "metadata": {\n        // Additional schema metadata\n      }\n    }\n  ],\n  "objects": [\n    {\n      "name": "string",\n      "schema": "string",\n      "data": {\n        // Object data matching schema fields\n      },\n      "metadata": {\n        // Additional object metadata\n      }\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"response-format",children:"Response Format"}),"\n",(0,i.jsx)(n.p,{children:"The import operation returns an array with the following structure:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"[\n  'schemas' => [\n    'schema_name' => [\n      // Imported schema data\n    ],\n  ],\n  'objects' => [\n    'object_name' => [\n      // Imported object data\n    ],\n  ]\n]\n"})}),"\n",(0,i.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.p,{children:"The import process includes strict validation and will throw exceptions in the following cases:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"JsonException"}),": When the provided JSON data is invalid"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"InvalidArgumentException"}),": When the JSON structure is invalid or required fields are missing"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-usage",children:"Example Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"try {\n    $jsonData = '{\"schemas\": [...], \"objects\": [...]}';\n    $result = $configurationService->importFromJson($jsonData, true, 'admin');\n    // Process result\n} catch (\\Exception $e) {\n    // Handle error\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"export",children:"Export"}),"\n",(0,i.jsx)(n.p,{children:"// ... existing export documentation ..."})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var r=t(6540);const i={},o=r.createContext(i);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);