"use strict";(self.webpackChunkopen_register_docs=self.webpackChunkopen_register_docs||[]).push([[877],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>v});var a=n(6540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),g=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=g(e.components);return a.createElement(o.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=g(n),d=i,v=c["".concat(o,".").concat(d)]||c[d]||u[d]||r;return n?a.createElement(v,l(l({ref:t},p),{},{components:n})):a.createElement(v,l({ref:t},p))}));function v(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[c]="string"==typeof e?e:i,l[1]=s;for(var g=2;g<r;g++)l[g]=n[g];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5851:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>g});var a=n(8168),i=(n(6540),n(5680));const r={title:"Events",sidebar_position:7},l="Events",s={unversionedId:"Core/events",id:"Core/events",title:"Events",description:"What are Events in Open Register?",source:"@site/docs/Core/events.md",sourceDirName:"Core",slug:"/Core/events",permalink:"/docs/Core/events",draft:!1,editUrl:"https://github.com/conductionnl/openregister/tree/main/website/docs/Core/events.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Events",sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Files",permalink:"/docs/Core/files"},next:{title:"Concept Relationships",permalink:"/docs/Core/relationships"}},o={},g=[{value:"What are Events in Open Register?",id:"what-are-events-in-open-register",level:2},{value:"Event Structure",id:"event-structure",level:2},{value:"Event Categories",id:"event-categories",level:2},{value:"1. Schema Events",id:"1-schema-events",level:3},{value:"2. Register Events",id:"2-register-events",level:3},{value:"3. Object Events",id:"3-object-events",level:3},{value:"4. File Events",id:"4-file-events",level:3},{value:"5. Validation Events",id:"5-validation-events",level:3},{value:"Example Event",id:"example-event",level:2},{value:"Event-Driven Architecture",id:"event-driven-architecture",level:2},{value:"1. Loose Coupling",id:"1-loose-coupling",level:3},{value:"2. Extensibility",id:"2-extensibility",level:3},{value:"3. Scalability",id:"3-scalability",level:3},{value:"4. Observability",id:"4-observability",level:3},{value:"Working with Events",id:"working-with-events",level:2},{value:"Listening to Events",id:"listening-to-events",level:3},{value:"Registering Event Listeners",id:"registering-event-listeners",level:3},{value:"Dispatching Events",id:"dispatching-events",level:3},{value:"Event Relationships",id:"event-relationships",level:2},{value:"Events and Objects",id:"events-and-objects",level:3},{value:"Events and Schemas",id:"events-and-schemas",level:3},{value:"Events and Registers",id:"events-and-registers",level:3},{value:"Events and Files",id:"events-and-files",level:3},{value:"Use Cases",id:"use-cases",level:2},{value:"1. Integration",id:"1-integration",level:3},{value:"2. Workflow Automation",id:"2-workflow-automation",level:3},{value:"3. Audit and Compliance",id:"3-audit-and-compliance",level:3},{value:"4. Custom Business Logic",id:"4-custom-business-logic",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Conclusion",id:"conclusion",level:2}],p={toc:g},c="wrapper";function u(e){let{components:t,...n}=e;return(0,i.yg)(c,(0,a.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"events"},"Events"),(0,i.yg)("h2",{id:"what-are-events-in-open-register"},"What are Events in Open Register?"),(0,i.yg)("p",null,"In Open Register, ",(0,i.yg)("strong",{parentName:"p"},"Events")," are notifications that are triggered when significant actions occur within the system. They form the foundation of Open Register's event-driven architecture, enabling loose coupling between components while facilitating rich integration possibilities."),(0,i.yg)("p",null,"Events in Open Register are:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Triggered automatically at key points in the application lifecycle"),(0,i.yg)("li",{parentName:"ul"},"Standardized messages containing relevant data about what occurred"),(0,i.yg)("li",{parentName:"ul"},"Available for other components to listen and respond to"),(0,i.yg)("li",{parentName:"ul"},"Essential for building extensible, integrated systems"),(0,i.yg)("li",{parentName:"ul"},"Compatible with Nextcloud's event dispatcher system")),(0,i.yg)("h2",{id:"event-structure"},"Event Structure"),(0,i.yg)("p",null,"An event in Open Register consists of the following key components:"),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"Component"),(0,i.yg)("th",{parentName:"tr",align:null},"Description"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"Event Class"),(0,i.yg)("td",{parentName:"tr",align:null},"The PHP class that defines the event type")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"Event Data"),(0,i.yg)("td",{parentName:"tr",align:null},"The data payload carried by the event")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"Timestamp"),(0,i.yg)("td",{parentName:"tr",align:null},"When the event occurred")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"Source"),(0,i.yg)("td",{parentName:"tr",align:null},"The component that triggered the event")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"Context"),(0,i.yg)("td",{parentName:"tr",align:null},"Additional contextual information")))),(0,i.yg)("h2",{id:"event-categories"},"Event Categories"),(0,i.yg)("p",null,"Open Register provides several categories of events:"),(0,i.yg)("h3",{id:"1-schema-events"},"1. Schema Events"),(0,i.yg)("p",null,"Events related to schema lifecycle:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"SchemaCreatedEvent"),": Triggered when a new schema is created"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"SchemaUpdatedEvent"),": Triggered when a schema is updated"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"SchemaDeletedEvent"),": Triggered when a schema is deleted")),(0,i.yg)("h3",{id:"2-register-events"},"2. Register Events"),(0,i.yg)("p",null,"Events related to register lifecycle:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"RegisterCreatedEvent"),": Triggered when a new register is created"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"RegisterUpdatedEvent"),": Triggered when a register is updated"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"RegisterDeletedEvent"),": Triggered when a register is deleted")),(0,i.yg)("h3",{id:"3-object-events"},"3. Object Events"),(0,i.yg)("p",null,"Events related to object lifecycle:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"ObjectCreatedEvent"),": Triggered when a new object is created"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"ObjectUpdatedEvent"),": Triggered when an object is updated"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"ObjectDeletedEvent"),": Triggered when an object is deleted")),(0,i.yg)("h3",{id:"4-file-events"},"4. File Events"),(0,i.yg)("p",null,"Events related to file operations:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"FileUploadedEvent"),": Triggered when a file is uploaded"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"FileUpdatedEvent"),": Triggered when a file is updated"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"FileDeletedEvent"),": Triggered when a file is deleted")),(0,i.yg)("h3",{id:"5-validation-events"},"5. Validation Events"),(0,i.yg)("p",null,"Events related to validation:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"ValidationSucceededEvent"),": Triggered when validation succeeds"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"ValidationFailedEvent"),": Triggered when validation fails")),(0,i.yg)("h2",{id:"example-event"},"Example Event"),(0,i.yg)("p",null,"Here's an example of an ",(0,i.yg)("inlineCode",{parentName:"p"},"ObjectCreatedEvent"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-php"},"namespace OCA\\OpenRegister\\Event;\n\nuse OCA\\OpenRegister\\Entity\\ObjectEntity;\nuse OCP\\EventDispatcher\\Event;\n\nclass ObjectCreatedEvent extends Event {\n    private ObjectEntity $object;\n\n    public function __construct(ObjectEntity $object) {\n        parent::__construct();\n        $this->object = $object;\n    }\n\n    public function getObject(): ObjectEntity {\n        return $this->object;\n    }\n}\n")),(0,i.yg)("h2",{id:"event-driven-architecture"},"Event-Driven Architecture"),(0,i.yg)("p",null,"Open Register uses an event-driven architecture to provide several benefits:"),(0,i.yg)("h3",{id:"1-loose-coupling"},"1. Loose Coupling"),(0,i.yg)("p",null,"Components can interact without direct dependencies:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"The event publisher doesn't need to know who is listening"),(0,i.yg)("li",{parentName:"ul"},"Listeners can be added or removed without changing the publisher"),(0,i.yg)("li",{parentName:"ul"},"Different parts of the system can evolve independently")),(0,i.yg)("h3",{id:"2-extensibility"},"2. Extensibility"),(0,i.yg)("p",null,"The event system makes Open Register highly extensible:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"New functionality can be added by listening to existing events"),(0,i.yg)("li",{parentName:"ul"},"Third-party applications can integrate without modifying core code"),(0,i.yg)("li",{parentName:"ul"},"Custom business logic can be implemented through event listeners")),(0,i.yg)("h3",{id:"3-scalability"},"3. Scalability"),(0,i.yg)("p",null,"Event-driven architectures support better scalability:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Processing can be distributed across different components"),(0,i.yg)("li",{parentName:"ul"},"Asynchronous handling allows for better resource management"),(0,i.yg)("li",{parentName:"ul"},"Event queues can buffer processing during peak loads")),(0,i.yg)("h3",{id:"4-observability"},"4. Observability"),(0,i.yg)("p",null,"Events provide better system observability:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"System activities can be monitored through events"),(0,i.yg)("li",{parentName:"ul"},"Audit trails can be built by capturing events"),(0,i.yg)("li",{parentName:"ul"},"Debugging is easier with a clear event timeline")),(0,i.yg)("h2",{id:"working-with-events"},"Working with Events"),(0,i.yg)("h3",{id:"listening-to-events"},"Listening to Events"),(0,i.yg)("p",null,"To listen to events in Open Register, you need to:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"Create an event listener class"),(0,i.yg)("li",{parentName:"ol"},"Register it with Nextcloud's event dispatcher")),(0,i.yg)("p",null,"Here's an example of a listener for ",(0,i.yg)("inlineCode",{parentName:"p"},"ObjectCreatedEvent"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-php"},"namespace OCA\\MyApp\\Listener;\n\nuse OCA\\OpenRegister\\Event\\ObjectCreatedEvent;\nuse OCP\\EventDispatcher\\Event;\nuse OCP\\EventDispatcher\\IEventListener;\n\nclass ObjectCreatedListener implements IEventListener {\n    public function handle(Event $event): void {\n        if (!($event instanceof ObjectCreatedEvent)) {\n            return;\n        }\n        \n        $object = $event->getObject();\n        // Perform actions with the new object\n    }\n}\n")),(0,i.yg)("h3",{id:"registering-event-listeners"},"Registering Event Listeners"),(0,i.yg)("p",null,"Register your listener in your app's ",(0,i.yg)("inlineCode",{parentName:"p"},"Application.php")," file:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-php"},"use OCA\\OpenRegister\\Event\\ObjectCreatedEvent;\nuse OCA\\MyApp\\Listener\\ObjectCreatedListener;\nuse OCP\\EventDispatcher\\IEventDispatcher;\n\n// In the register() method:\n$dispatcher = $this->getContainer()->get(IEventDispatcher::class);\n$dispatcher->addServiceListener(ObjectCreatedEvent::class, ObjectCreatedListener::class);\n")),(0,i.yg)("h3",{id:"dispatching-events"},"Dispatching Events"),(0,i.yg)("p",null,"If you're extending Open Register, you might need to dispatch your own events:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-php"},"use OCA\\OpenRegister\\Event\\CustomEvent;\nuse OCP\\EventDispatcher\\IEventDispatcher;\n\n// Inject the event dispatcher\nprivate IEventDispatcher $eventDispatcher;\n\npublic function __construct(IEventDispatcher $eventDispatcher) {\n    $this->eventDispatcher = $eventDispatcher;\n}\n\n// Dispatch an event\npublic function performAction() {\n    // Do something\n    $event = new CustomEvent($data);\n    $this->eventDispatcher->dispatch(CustomEvent::class, $event);\n}\n")),(0,i.yg)("h2",{id:"event-relationships"},"Event Relationships"),(0,i.yg)("p",null,"Events have important relationships with other core concepts:"),(0,i.yg)("h3",{id:"events-and-objects"},"Events and Objects"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Events are triggered by changes to objects"),(0,i.yg)("li",{parentName:"ul"},"Events carry object data"),(0,i.yg)("li",{parentName:"ul"},"Events enable tracking object lifecycle")),(0,i.yg)("h3",{id:"events-and-schemas"},"Events and Schemas"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Schema changes trigger events"),(0,i.yg)("li",{parentName:"ul"},"Events can be used to validate schema compatibility"),(0,i.yg)("li",{parentName:"ul"},"Events enable schema evolution tracking")),(0,i.yg)("h3",{id:"events-and-registers"},"Events and Registers"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Register operations trigger events"),(0,i.yg)("li",{parentName:"ul"},"Events can be used to monitor register usage"),(0,i.yg)("li",{parentName:"ul"},"Events enable register lifecycle management")),(0,i.yg)("h3",{id:"events-and-files"},"Events and Files"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"File operations trigger events"),(0,i.yg)("li",{parentName:"ul"},"Events carry file metadata"),(0,i.yg)("li",{parentName:"ul"},"Events enable file processing workflows")),(0,i.yg)("h2",{id:"use-cases"},"Use Cases"),(0,i.yg)("h3",{id:"1-integration"},"1. Integration"),(0,i.yg)("p",null,"Use events to integrate with other systems:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Sync data with external systems"),(0,i.yg)("li",{parentName:"ul"},"Trigger notifications in messaging platforms"),(0,i.yg)("li",{parentName:"ul"},"Update search indexes")),(0,i.yg)("h3",{id:"2-workflow-automation"},"2. Workflow Automation"),(0,i.yg)("p",null,"Build automated workflows:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Generate documents when objects are created"),(0,i.yg)("li",{parentName:"ul"},"Send approval requests when objects are updated"),(0,i.yg)("li",{parentName:"ul"},"Archive data when objects are deleted")),(0,i.yg)("h3",{id:"3-audit-and-compliance"},"3. Audit and Compliance"),(0,i.yg)("p",null,"Implement audit and compliance features:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Log all changes to sensitive data"),(0,i.yg)("li",{parentName:"ul"},"Track who did what and when"),(0,i.yg)("li",{parentName:"ul"},"Generate compliance reports")),(0,i.yg)("h3",{id:"4-custom-business-logic"},"4. Custom Business Logic"),(0,i.yg)("p",null,"Implement custom business logic:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Validate complex business rules"),(0,i.yg)("li",{parentName:"ul"},"Enforce data quality standards"),(0,i.yg)("li",{parentName:"ul"},"Implement approval workflows")),(0,i.yg)("h2",{id:"best-practices"},"Best Practices"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("strong",{parentName:"li"},"Keep Listeners Focused"),": Each listener should have a single responsibility"),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("strong",{parentName:"li"},"Handle Errors Gracefully"),": Listeners should not break the system if they fail"),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("strong",{parentName:"li"},"Consider Performance"),": Heavy processing should be done asynchronously"),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("strong",{parentName:"li"},"Document Events"),": Clearly document what events are available and when they're triggered"),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("strong",{parentName:"li"},"Version Events"),": Consider versioning events to handle changes over time"),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("strong",{parentName:"li"},"Test Event Handling"),": Write tests for event listeners"),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("strong",{parentName:"li"},"Monitor Event Flow"),": Implement monitoring for event processing")),(0,i.yg)("h2",{id:"conclusion"},"Conclusion"),(0,i.yg)("p",null,"Events in Open Register provide a powerful mechanism for extending functionality, integrating with other systems, and building loosely coupled architectures. By leveraging the event-driven approach, you can create flexible, scalable applications that can evolve over time while maintaining a clean separation of concerns."))}u.isMDXComponent=!0}}]);