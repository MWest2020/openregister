"use strict";(self.webpackChunkopen_catalogi_docs=self.webpackChunkopen_catalogi_docs||[]).push([[495],{51:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"developers/response-classes","title":"Response Classes","description":"The OpenRegister application uses a hierarchy of response classes to handle different types of object operations. These classes provide a consistent interface for working with single objects, multiple objects, and their related data.","source":"@site/docs/developers/response-classes.md","sourceDirName":"developers","slug":"/developers/response-classes","permalink":"/docs/developers/response-classes","draft":false,"unlisted":false,"editUrl":"https://github.com/conductionnl/openregister/tree/main/website/docs/developers/response-classes.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Object Handling","permalink":"/docs/developers/object-handling"},"next":{"title":"ObjectService Refactoring","permalink":"/docs/development/object-service-refactoring"}}');var l=s(4848),o=s(8453);const r={},i="Response Classes",a={},c=[{value:"Class Hierarchy",id:"class-hierarchy",level:2},{value:"ObjectResponse",id:"objectresponse",level:2},{value:"Properties",id:"properties",level:3},{value:"Methods",id:"methods",level:3},{value:"Constructor",id:"constructor",level:4},{value:"Pagination",id:"pagination",level:4},{value:"Download",id:"download",level:4},{value:"Get Data",id:"get-data",level:4},{value:"Protected Methods",id:"protected-methods",level:3},{value:"SingleObjectResponse",id:"singleobjectresponse",level:2},{value:"Properties",id:"properties-1",level:3},{value:"Methods",id:"methods-1",level:3},{value:"Constructor",id:"constructor-1",level:4},{value:"Get Relations",id:"get-relations",level:4},{value:"Get Logs",id:"get-logs",level:4},{value:"Get Object",id:"get-object",level:4},{value:"MultipleObjectResponse",id:"multipleobjectresponse",level:2},{value:"Properties",id:"properties-2",level:3},{value:"Methods",id:"methods-2",level:3},{value:"Constructor",id:"constructor-2",level:4},{value:"Get Relations",id:"get-relations-1",level:4},{value:"Get Logs",id:"get-logs-1",level:4},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Single Object Operations",id:"single-object-operations",level:3},{value:"Multiple Object Operations",id:"multiple-object-operations",level:3},{value:"Pagination Example",id:"pagination-example",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Error Handling",id:"error-handling",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"response-classes",children:"Response Classes"})}),"\n",(0,l.jsx)(n.p,{children:"The OpenRegister application uses a hierarchy of response classes to handle different types of object operations. These classes provide a consistent interface for working with single objects, multiple objects, and their related data."}),"\n",(0,l.jsx)(n.h2,{id:"class-hierarchy",children:"Class Hierarchy"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"ObjectResponse\n\u251c\u2500\u2500 SingleObjectResponse\n\u2514\u2500\u2500 MultipleObjectResponse\n"})}),"\n",(0,l.jsx)(n.h2,{id:"objectresponse",children:"ObjectResponse"}),"\n",(0,l.jsx)(n.p,{children:"The base response class that provides common functionality for all object responses."}),"\n",(0,l.jsx)(n.h3,{id:"properties",children:"Properties"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",children:"protected array $data;        // The response data\nprotected ?int $page = null;  // Current page number\nprotected ?int $limit = null; // Items per page\nprotected ?int $total = null; // Total number of items\n"})}),"\n",(0,l.jsx)(n.h3,{id:"methods",children:"Methods"}),"\n",(0,l.jsx)(n.h4,{id:"constructor",children:"Constructor"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",children:"public function __construct(array|ObjectEntity $data)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Creates a new response instance with the given data."}),"\n",(0,l.jsx)(n.h4,{id:"pagination",children:"Pagination"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",children:"public function paginate(\n    int $page = 1,\n    ?int $limit = 10,\n    ?int $total = null\n): self\n"})}),"\n",(0,l.jsx)(n.p,{children:"Paginates the response data."}),"\n",(0,l.jsx)(n.h4,{id:"download",children:"Download"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",children:"public function download(string $format): string\n"})}),"\n",(0,l.jsx)(n.p,{children:"Downloads the data in the specified format (json, xml, csv, excel)."}),"\n",(0,l.jsx)(n.h4,{id:"get-data",children:"Get Data"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",children:"public function getData(): array\n"})}),"\n",(0,l.jsx)(n.p,{children:"Returns the response data with optional pagination metadata."}),"\n",(0,l.jsx)(n.h3,{id:"protected-methods",children:"Protected Methods"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",children:"protected function downloadJson(array $normalizers): string\nprotected function downloadXml(array $normalizers): string\nprotected function downloadCsv(array $normalizers): string\nprotected function downloadExcel(): string\n"})}),"\n",(0,l.jsx)(n.h2,{id:"singleobjectresponse",children:"SingleObjectResponse"}),"\n",(0,l.jsx)(n.p,{children:"Response class for single object operations, extending ObjectResponse."}),"\n",(0,l.jsx)(n.h3,{id:"properties-1",children:"Properties"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",children:"private GetObject $getHandler;    // Handler for fetching related data\nprivate ObjectEntity $object;     // The object entity\n"})}),"\n",(0,l.jsx)(n.h3,{id:"methods-1",children:"Methods"}),"\n",(0,l.jsx)(n.h4,{id:"constructor-1",children:"Constructor"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",children:"public function __construct(ObjectEntity $object, GetObject $getHandler)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Creates a new single object response."}),"\n",(0,l.jsx)(n.h4,{id:"get-relations",children:"Get Relations"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",children:"public function getRelations(): ObjectResponse\n"})}),"\n",(0,l.jsx)(n.p,{children:"Returns related objects for the current object."}),"\n",(0,l.jsx)(n.h4,{id:"get-logs",children:"Get Logs"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",children:"public function getLogs(): ObjectResponse\n"})}),"\n",(0,l.jsx)(n.p,{children:"Returns logs for the current object."}),"\n",(0,l.jsx)(n.h4,{id:"get-object",children:"Get Object"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",children:"public function getObject(): ObjectEntity\n"})}),"\n",(0,l.jsx)(n.p,{children:"Returns the object entity."}),"\n",(0,l.jsx)(n.h2,{id:"multipleobjectresponse",children:"MultipleObjectResponse"}),"\n",(0,l.jsx)(n.p,{children:"Response class for multiple object operations, extending ObjectResponse."}),"\n",(0,l.jsx)(n.h3,{id:"properties-2",children:"Properties"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",children:"private GetObject $getHandler;    // Handler for fetching related data\n"})}),"\n",(0,l.jsx)(n.h3,{id:"methods-2",children:"Methods"}),"\n",(0,l.jsx)(n.h4,{id:"constructor-2",children:"Constructor"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",children:"public function __construct(array $objects, GetObject $getHandler)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Creates a new multiple object response."}),"\n",(0,l.jsx)(n.h4,{id:"get-relations-1",children:"Get Relations"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",children:"public function getRelations(): ObjectResponse\n"})}),"\n",(0,l.jsx)(n.p,{children:"Returns related objects for all objects in the collection."}),"\n",(0,l.jsx)(n.h4,{id:"get-logs-1",children:"Get Logs"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",children:"public function getLogs(): ObjectResponse\n"})}),"\n",(0,l.jsx)(n.p,{children:"Returns logs for all objects in the collection."}),"\n",(0,l.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,l.jsx)(n.h3,{id:"single-object-operations",children:"Single Object Operations"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",children:"// Get an object with its relations\n$response = $objectService->getObject($uuid);\n$relations = $response->getRelations()->paginate(1, 10);\n\n// Get object logs\n$logs = $response->getLogs()->paginate(1, 10);\n\n// Download object data\n$jsonData = $response->download('json');\n"})}),"\n",(0,l.jsx)(n.h3,{id:"multiple-object-operations",children:"Multiple Object Operations"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",children:"// Get multiple objects\n$response = $objectService->getObjects(['status' => 'active']);\n\n// Get relations for all objects\n$relations = $response->getRelations()->paginate(1, 10);\n\n// Get logs for all objects\n$logs = $response->getLogs()->paginate(1, 10);\n\n// Download all objects\n$csvData = $response->download('csv');\n"})}),"\n",(0,l.jsx)(n.h3,{id:"pagination-example",children:"Pagination Example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",children:"$response = $objectService->getObjects()\n    ->paginate(\n        page: 2,\n        limit: 25,\n        total: 100\n    );\n\n$data = $response->getData();\n// Returns:\n// [\n//     'data' => [...],\n//     'pagination' => [\n//         'page' => 2,\n//         'limit' => 25,\n//         'total' => 100,\n//         'pages' => 4\n//     ]\n// ]\n"})}),"\n",(0,l.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"Use the appropriate response type for your operation"}),"\n",(0,l.jsx)(n.li,{children:"Always handle pagination for large datasets"}),"\n",(0,l.jsx)(n.li,{children:"Consider memory usage when working with multiple objects"}),"\n",(0,l.jsx)(n.li,{children:"Use type hints in your code"}),"\n",(0,l.jsx)(n.li,{children:"Handle download formats appropriately"}),"\n",(0,l.jsx)(n.li,{children:"Chain methods in a logical order"}),"\n",(0,l.jsx)(n.li,{children:"Use error handling when working with responses"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",children:"try {\n    $response = $objectService->getObject($uuid);\n    $data = $response->download('json');\n} catch (Exception $e) {\n    // Handle download error\n}\n\ntry {\n    $response = $objectService->getObjects()\n        ->paginate(1, 10);\n} catch (Exception $e) {\n    // Handle pagination error\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>i});var t=s(6540);const l={},o=t.createContext(l);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);