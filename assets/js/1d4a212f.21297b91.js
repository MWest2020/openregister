"use strict";(self.webpackChunkopen_catalogi_docs=self.webpackChunkopen_catalogi_docs||[]).push([[958],{8427:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"development/object-service-refactoring","title":"ObjectService Refactoring","description":"Overview","source":"@site/docs/development/object-service-refactoring.md","sourceDirName":"development","slug":"/development/object-service-refactoring","permalink":"/docs/development/object-service-refactoring","draft":false,"unlisted":false,"editUrl":"https://github.com/conductionnl/openregister/tree/main/website/docs/development/object-service-refactoring.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Response Classes","permalink":"/docs/developers/response-classes"},"next":{"title":"File Attachments","permalink":"/docs/file-attachments"}}');var l=i(4848),s=i(8453);const r={},c="ObjectService Refactoring",a={},d=[{value:"Overview",id:"overview",level:2},{value:"Handler Classes",id:"handler-classes",level:2},{value:"RenderObject",id:"renderobject",level:3},{value:"ValidateObject",id:"validateobject",level:3},{value:"SaveObject",id:"saveobject",level:3},{value:"DeleteObject",id:"deleteobject",level:3},{value:"GetObject",id:"getobject",level:3},{value:"ObjectService as Facade",id:"objectservice-as-facade",level:2},{value:"Benefits",id:"benefits",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Migration Guide",id:"migration-guide",level:2},{value:"Technical Details",id:"technical-details",level:2},{value:"File Structure",id:"file-structure",level:3},{value:"Dependencies",id:"dependencies",level:3},{value:"State Management",id:"state-management",level:3},{value:"Testing",id:"testing",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"objectservice-refactoring",children:"ObjectService Refactoring"})}),"\n",(0,l.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,l.jsx)(n.p,{children:"The ObjectService has been refactored to improve maintainability and separation of concerns. The original monolithic service has been split into specialized handlers, each responsible for a specific aspect of object management."}),"\n",(0,l.jsx)(n.h2,{id:"handler-classes",children:"Handler Classes"}),"\n",(0,l.jsx)(n.p,{children:"The following handler classes have been created:"}),"\n",(0,l.jsx)(n.h3,{id:"renderobject",children:"RenderObject"}),"\n",(0,l.jsx)(n.p,{children:"Responsible for:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Transforming objects into their presentational format"}),"\n",(0,l.jsx)(n.li,{children:"Handling extensions and depth control"}),"\n",(0,l.jsx)(n.li,{children:"Managing field filtering"}),"\n",(0,l.jsx)(n.li,{children:"Converting entities to arrays with proper structure"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"validateobject",children:"ValidateObject"}),"\n",(0,l.jsx)(n.p,{children:"Responsible for:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Validating objects against their schemas"}),"\n",(0,l.jsx)(n.li,{children:"Handling custom validation rules"}),"\n",(0,l.jsx)(n.li,{children:"Managing validation error responses"}),"\n",(0,l.jsx)(n.li,{children:"Schema resolution and validation"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"saveobject",children:"SaveObject"}),"\n",(0,l.jsx)(n.p,{children:"Responsible for:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Saving objects to the database"}),"\n",(0,l.jsx)(n.li,{children:"Managing object relations"}),"\n",(0,l.jsx)(n.li,{children:"Handling file properties"}),"\n",(0,l.jsx)(n.li,{children:"Creating audit trails"}),"\n",(0,l.jsx)(n.li,{children:"Setting default values and metadata"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"deleteobject",children:"DeleteObject"}),"\n",(0,l.jsx)(n.p,{children:"Responsible for:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Deleting objects from the database"}),"\n",(0,l.jsx)(n.li,{children:"Managing cascading deletes"}),"\n",(0,l.jsx)(n.li,{children:"Cleaning up associated files"}),"\n",(0,l.jsx)(n.li,{children:"Handling relation cleanup"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"getobject",children:"GetObject"}),"\n",(0,l.jsx)(n.p,{children:"Responsible for:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Retrieving objects by ID or UUID"}),"\n",(0,l.jsx)(n.li,{children:"Finding multiple objects"}),"\n",(0,l.jsx)(n.li,{children:"Handling pagination and filtering"}),"\n",(0,l.jsx)(n.li,{children:"Managing file information retrieval"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"objectservice-as-facade",children:"ObjectService as Facade"}),"\n",(0,l.jsx)(n.p,{children:"The ObjectService now acts as a facade, coordinating between these specialized handlers. It:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Maintains register and schema state"}),"\n",(0,l.jsx)(n.li,{children:"Delegates operations to appropriate handlers"}),"\n",(0,l.jsx)(n.li,{children:"Provides a simplified interface for object operations"}),"\n",(0,l.jsx)(n.li,{children:"Manages cross-cutting concerns"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"benefits",children:"Benefits"}),"\n",(0,l.jsx)(n.p,{children:"This refactoring provides several benefits:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Improved maintainability through separation of concerns"}),"\n",(0,l.jsx)(n.li,{children:"Better testability of individual components"}),"\n",(0,l.jsx)(n.li,{children:"Reduced complexity in each component"}),"\n",(0,l.jsx)(n.li,{children:"Clearer responsibility boundaries"}),"\n",(0,l.jsx)(n.li,{children:"Easier to extend and modify individual aspects"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",children:"// Example of using the refactored ObjectService\n$objectService = new ObjectService(\n    $deleteHandler,\n    $getHandler,\n    $renderHandler,\n    $saveHandler,\n    $validateHandler\n);\n\n// Set context\n$objectService->setRegister($registerId);\n$objectService->setSchema($schemaId);\n\n// Create object\n$object = $objectService->createFromArray([\n    'name' => 'Test Object',\n    'description' => 'A test object'\n]);\n\n// Find object with extensions\n$foundObject = $objectService->find(\n    $id,\n    ['relatedObjects'],\n    true // include files\n);\n\n// Update object\n$updatedObject = $objectService->updateFromArray(\n    $id,\n    ['name' => 'Updated Name'],\n    true, // update version\n    false, // not a patch\n    ['relatedObjects'] // extend\n);\n\n// Delete object\n$objectService->delete($object);\n"})}),"\n",(0,l.jsx)(n.h2,{id:"migration-guide",children:"Migration Guide"}),"\n",(0,l.jsx)(n.p,{children:"When migrating from the old ObjectService to the new refactored version:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"Update dependency injection to include all handlers"}),"\n",(0,l.jsx)(n.li,{children:"Replace direct property access with handler method calls"}),"\n",(0,l.jsx)(n.li,{children:"Update any custom extensions to use the appropriate handler"}),"\n",(0,l.jsx)(n.li,{children:"Review and update any code that relied on internal ObjectService methods"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"technical-details",children:"Technical Details"}),"\n",(0,l.jsx)(n.h3,{id:"file-structure",children:"File Structure"}),"\n",(0,l.jsx)(n.p,{children:"The handlers are located in 'lib/Service/ObjectHandlers/':"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"RenderObject.php"}),"\n",(0,l.jsx)(n.li,{children:"ValidateObject.php"}),"\n",(0,l.jsx)(n.li,{children:"SaveObject.php"}),"\n",(0,l.jsx)(n.li,{children:"DeleteObject.php"}),"\n",(0,l.jsx)(n.li,{children:"GetObject.php"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"dependencies",children:"Dependencies"}),"\n",(0,l.jsx)(n.p,{children:"Each handler has its own specific dependencies, reducing the overall coupling of the system. Common dependencies include:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"ObjectEntityMapper"}),"\n",(0,l.jsx)(n.li,{children:"FileService"}),"\n",(0,l.jsx)(n.li,{children:"IURLGenerator"}),"\n",(0,l.jsx)(n.li,{children:"Various database mappers"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"state-management",children:"State Management"}),"\n",(0,l.jsx)(n.p,{children:"The ObjectService maintains register and schema state, which is used by the handlers when performing operations. This state can be set using:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"setRegister(int $register)"}),"\n",(0,l.jsx)(n.li,{children:"setSchema(int $schema)"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,l.jsx)(n.p,{children:"Each handler should have its own test suite. The ObjectService tests should focus on:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Proper delegation to handlers"}),"\n",(0,l.jsx)(n.li,{children:"State management"}),"\n",(0,l.jsx)(n.li,{children:"Error handling"}),"\n",(0,l.jsx)(n.li,{children:"Integration between handlers"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>c});var t=i(6540);const l={},s=t.createContext(l);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);