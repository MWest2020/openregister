"use strict";(self.webpackChunkopen_register_docs=self.webpackChunkopen_register_docs||[]).push([[649],{1470:(e,t,n)=>{n.d(t,{A:()=>w});var a=n(8168),r=n(6540),o=n(53),i=n(3104),s=n(6347),l=n(7485),c=n(1682),u=n(9466);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function g(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,c.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function d(e){let{queryString:t=!1,groupId:n}=e;const a=(0,s.W6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l.aZ)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function y(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=g(e),[i,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[l,c]=d({queryString:n,groupId:a}),[p,y]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,u.Dv)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),h=(()=>{const e=l??p;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{h&&s(h)}),[h]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),c(e),y(e)}),[c,y,o]),tabValues:o}}var h=n(2303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:t,block:n,selectedValue:s,selectValue:l,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.a_)(),g=e=>{const t=e.currentTarget,n=u.indexOf(t),a=c[n].value;a!==s&&(p(t),l(a))},m=e=>{let t=null;switch(e.key){case"Enter":g(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.A)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:g},i,{className:(0,o.A)("tabs__item",f.tabItem,i?.className,{"tabs__item--active":s===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function N(e){const t=y(e);return r.createElement("div",{className:(0,o.A)("tabs-container",f.tabList)},r.createElement(b,(0,a.A)({},e,t)),r.createElement(v,(0,a.A)({},e,t)))}function w(e){const t=(0,h.A)();return r.createElement(N,(0,a.A)({key:String(t)},e))}},2230:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var a=n(8168),r=(n(6540),n(5680)),o=n(1470),i=n(9365);const s={title:"Making Notes Stick",sidebar_position:4},l="Note Taking in Open Register",c={unversionedId:"UseCases/notes",id:"UseCases/notes",title:"Making Notes Stick",description:"Note Object: A Tale of Digital Sticky Notes",source:"@site/docs/UseCases/notes.md",sourceDirName:"UseCases",slug:"/UseCases/notes",permalink:"/docs/UseCases/notes",draft:!1,editUrl:"https://github.com/conductionnl/openregister/tree/main/website/docs/UseCases/notes.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Making Notes Stick",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Product and Service Catalogue",permalink:"/docs/UseCases/productServiceCatalogue"},next:{title:"File Attachments",permalink:"/docs/file-attachments"}},u={},p=[{value:"Note Object: A Tale of Digital Sticky Notes",id:"note-object-a-tale-of-digital-sticky-notes",level:2},{value:"The Quest for the Perfect Note",id:"the-quest-for-the-perfect-note",level:3},{value:"The Magic of &quot;About&quot;",id:"the-magic-of-about",level:3},{value:"Implementation in Open Register",id:"implementation-in-open-register",level:3},{value:"Technical Implementation",id:"technical-implementation",level:3},{value:"Using Notes in Your Application",id:"using-notes-in-your-application",level:2},{value:"Creating a Note",id:"creating-a-note",level:3},{value:"Retrieving Notes About an Object",id:"retrieving-notes-about-an-object",level:3},{value:"Use Cases",id:"use-cases",level:2},{value:"Case Management",id:"case-management",level:3},{value:"Project Management",id:"project-management",level:3},{value:"Customer Relationship Management",id:"customer-relationship-management",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Writing Effective Notes",id:"writing-effective-notes",level:3},{value:"Organizational Strategies",id:"organizational-strategies",level:3},{value:"Conclusion",id:"conclusion",level:2}],g={toc:p},m="wrapper";function d(e){let{components:t,...n}=e;return(0,r.yg)(m,(0,a.A)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"note-taking-in-open-register"},"Note Taking in Open Register"),(0,r.yg)("h2",{id:"note-object-a-tale-of-digital-sticky-notes"},"Note Object: A Tale of Digital Sticky Notes"),(0,r.yg)("p",null,"Let's talk about notes - those digital breadcrumbs we leave everywhere in our systems. Whether you're a government employee making case notes, a manager jotting down meeting minutes, or a citizen service representative documenting a phone call, we all need to write things down. It's a fundamental human need that's followed us from paper notebooks into the digital age."),(0,r.yg)("h3",{id:"the-quest-for-the-perfect-note"},"The Quest for the Perfect Note"),(0,r.yg)("p",null,"In our journey to design the perfect note system, we looked at how different platforms handle note-taking:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Microsoft OneNote")," with its rich formatting and organizational hierarchy"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Google Keep")," focusing on simplicity and quick capture"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Evernote")," balancing features with usability"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Schema.org's Comment type")," providing a web-standard approach"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Nextcloud Notes")," offering an open-source perspective")),(0,r.yg)("p",null,"Each system had its strengths, but they all shared common elements: a title, content, timestamps, and some way to organize notes. We wanted to create something that could work with all of these systems - a note that could live in your phone's notes app, sync to your office OneNote, or appear in your government case management system."),(0,r.yg)("h3",{id:"the-magic-of-about"},'The Magic of "About"'),(0,r.yg)("p",null,'The real breakthrough came when we discovered Schema.org\'s "about" property. It\'s a simple but powerful concept: every note can be "about" something else. In technical terms, it\'s a URI or UUID pointing to another object in the system.'),(0,r.yg)("p",null,"For example:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"A case worker can create a note 'about' a specific case"),(0,r.yg)("li",{parentName:"ul"},"A manager can write meeting minutes 'about' a project"),(0,r.yg)("li",{parentName:"ul"},"A support agent can log a conversation 'about' a customer")),(0,r.yg)("h3",{id:"implementation-in-open-register"},"Implementation in Open Register"),(0,r.yg)("p",null,"In Open Register, we've implemented notes as first-class objects with the following key features:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"Rich Text Support"),": Notes can contain formatted text, lists, and links using Markdown"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"Attachments"),": Files can be added to notes for comprehensive documentation"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"Relationships"),": Notes can be linked to any other object in the system"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"Version History"),": All changes to notes are tracked and can be reviewed"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"Access Control"),": Notes inherit permissions from their parent objects")),(0,r.yg)("h3",{id:"technical-implementation"},"Technical Implementation"),(0,r.yg)("p",null,"The note object schema includes:"),(0,r.yg)(o.A,{mdxType:"Tabs"},(0,r.yg)(i.A,{value:"json",label:"JSON Schema",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "$schema": "http://json-schema.org/draft-07/schema#",\n  "type": "object",\n  "title": "Note",\n  "description": "A note or comment about something",\n  "required": ["title", "content"],\n  "properties": {\n    "id": {\n      "type": "string",\n      "description": "Unique identifier for the note"\n    },\n    "title": {\n      "type": "string",\n      "description": "Title of the note"\n    },\n    "content": {\n      "type": "string",\n      "description": "Content of the note in Markdown format"\n    },\n    "about": {\n      "type": "string",\n      "format": "uri",\n      "description": "URI or UUID of the object this note is about"\n    },\n    "author": {\n      "type": "string",\n      "description": "Author of the note"\n    },\n    "dateCreated": {\n      "type": "string",\n      "format": "date-time",\n      "description": "Date and time when the note was created"\n    },\n    "dateModified": {\n      "type": "string",\n      "format": "date-time",\n      "description": "Date and time when the note was last modified"\n    },\n    "tags": {\n      "type": "array",\n      "items": {\n        "type": "string"\n      },\n      "description": "Tags or keywords associated with the note"\n    },\n    "attachments": {\n      "type": "array",\n      "items": {\n        "type": "object",\n        "properties": {\n          "id": {\n            "type": "string"\n          },\n          "name": {\n            "type": "string"\n          },\n          "contentType": {\n            "type": "string"\n          },\n          "url": {\n            "type": "string",\n            "format": "uri"\n          }\n        }\n      },\n      "description": "Files attached to the note"\n    }\n  }\n}\n'))),(0,r.yg)(i.A,{value:"example",label:"Example Note",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "id": "note-123456",\n  "title": "Meeting with Project Team",\n  "content": "# Discussion Points\\n\\n- Timeline review\\n- Budget concerns\\n- Resource allocation\\n\\n## Action Items\\n\\n1. John to update project plan by Friday\\n2. Sarah to contact vendors about pricing\\n3. Team to review resource requirements",\n  "about": "project-789012",\n  "author": "user-345678",\n  "dateCreated": "2023-05-15T10:30:00Z",\n  "dateModified": "2023-05-15T11:45:00Z",\n  "tags": ["meeting", "project", "action-items"],\n  "attachments": [\n    {\n      "id": "attachment-901234",\n      "name": "Project Timeline.pdf",\n      "contentType": "application/pdf",\n      "url": "/api/files/attachment-901234"\n    }\n  ]\n}\n')))),(0,r.yg)("h2",{id:"using-notes-in-your-application"},"Using Notes in Your Application"),(0,r.yg)("h3",{id:"creating-a-note"},"Creating a Note"),(0,r.yg)("p",null,"Notes can be created through the API or the user interface. When creating a note, you'll need to specify at minimum:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"A title"),(0,r.yg)("li",{parentName:"ol"},"Content (in Markdown format)"),(0,r.yg)("li",{parentName:"ol"},"The 'about' reference (what the note is about)")),(0,r.yg)(o.A,{mdxType:"Tabs"},(0,r.yg)(i.A,{value:"api",label:"API Request",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'POST /api/objects\n{\n  "register": "notes-register",\n  "schema": "note-schema",\n  "object": {\n    "title": "Customer Follow-up",\n    "content": "Called customer regarding their recent support ticket. They confirmed the issue is resolved.",\n    "about": "customer-567890"\n  }\n}\n'))),(0,r.yg)(i.A,{value:"ui",label:"User Interface",mdxType:"TabItem"},(0,r.yg)("p",null,"The Open Register UI provides a note editor with:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"A title field"),(0,r.yg)("li",{parentName:"ul"},"A rich text editor with Markdown support"),(0,r.yg)("li",{parentName:"ul"},"An 'about' selector to choose what the note relates to"),(0,r.yg)("li",{parentName:"ul"},"File upload capabilities for attachments"),(0,r.yg)("li",{parentName:"ul"},"Tag selection")))),(0,r.yg)("h3",{id:"retrieving-notes-about-an-object"},"Retrieving Notes About an Object"),(0,r.yg)("p",null,"One of the most powerful features is the ability to retrieve all notes about a specific object:"),(0,r.yg)(o.A,{mdxType:"Tabs"},(0,r.yg)(i.A,{value:"api",label:"API Request",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'GET /api/objects?register=notes-register&schema=note-schema&filter={"about":"customer-567890"}\n'))),(0,r.yg)(i.A,{value:"ui",label:"User Interface",mdxType:"TabItem"},(0,r.yg)("p",null,'In the Open Register UI, notes are displayed in the context of their related objects. When viewing any object, its associated notes appear in a dedicated "Notes" tab or section.'))),(0,r.yg)("h2",{id:"use-cases"},"Use Cases"),(0,r.yg)("h3",{id:"case-management"},"Case Management"),(0,r.yg)("p",null,"In a government case management system, notes are essential for documenting interactions, decisions, and progress:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Case Workers")," can document client interactions"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Supervisors")," can add review notes"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Specialists")," can provide expert input"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Clients")," can even add their own notes in self-service portals")),(0,r.yg)("h3",{id:"project-management"},"Project Management"),(0,r.yg)("p",null,"For project teams, notes serve multiple purposes:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Meeting Minutes")," capture discussions and decisions"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Status Updates")," document progress"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Issue Notes")," track problems and resolutions"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Decision Records")," preserve the reasoning behind choices")),(0,r.yg)("h3",{id:"customer-relationship-management"},"Customer Relationship Management"),(0,r.yg)("p",null,"In CRM systems, notes help maintain comprehensive customer histories:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Support Interactions")," document customer issues and resolutions"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Sales Notes")," track conversations with prospects"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Account Management")," records important customer preferences"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Internal Notes")," share insights between team members")),(0,r.yg)("h2",{id:"best-practices"},"Best Practices"),(0,r.yg)("h3",{id:"writing-effective-notes"},"Writing Effective Notes"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"Be Specific"),": Include relevant details, dates, and names"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"Structure Content"),": Use headings, lists, and formatting to organize information"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"Focus on Facts"),": Distinguish between observations and interpretations"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"Include Next Steps"),": Note any follow-up actions required"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"Be Concise"),": Keep notes clear and to the point")),(0,r.yg)("h3",{id:"organizational-strategies"},"Organizational Strategies"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"Consistent Tagging"),": Develop a standard set of tags for your organization"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"Linking Related Notes"),": Use the 'about' property to create relationships"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"Regular Reviews"),": Periodically review and clean up notes"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"Template Usage"),": Create templates for common note types")),(0,r.yg)("h2",{id:"conclusion"},"Conclusion"),(0,r.yg)("p",null,"Notes in Open Register bridge the gap between structured data and the messy reality of human communication. By implementing notes as first-class objects with rich relationships to other entities, we've created a flexible system that adapts to how people naturally work while maintaining the benefits of structured data."),(0,r.yg)("p",null,"Whether you're implementing a case management system, a project tracking tool, or a customer relationship platform, the note object provides a powerful way to capture, organize, and retrieve the human side of your digital processes."))}d.isMDXComponent=!0},5680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>d});var a=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,d=p["".concat(l,".").concat(m)]||p[m]||g[m]||o;return n?a.createElement(d,i(i({ref:t},u),{},{components:n})):a.createElement(d,i({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9365:(e,t,n)=>{n.d(t,{A:()=>i});var a=n(6540),r=n(53);const o={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.A)(o.tabItem,i),hidden:n},t)}}}]);