"use strict";(self.webpackChunkopen_catalogi_docs=self.webpackChunkopen_catalogi_docs||[]).push([[7877],{1095:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"Core/events","title":"Events","description":"What are Events in Open Register?","source":"@site/docs/Core/events.md","sourceDirName":"Core","slug":"/Core/events","permalink":"/docs/Core/events","draft":false,"unlisted":false,"editUrl":"https://github.com/conductionnl/openregister/tree/main/website/docs/Core/events.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"title":"Events","sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Files","permalink":"/docs/Core/files"},"next":{"title":"Concept Relationships","permalink":"/docs/Core/relationships"}}');var s=t(4848),r=t(8453);const l={title:"Events",sidebar_position:7},c="Events",d={},a=[{value:"What are Events in Open Register?",id:"what-are-events-in-open-register",level:2},{value:"Event Structure",id:"event-structure",level:2},{value:"Event Categories",id:"event-categories",level:2},{value:"1. Schema Events",id:"1-schema-events",level:3},{value:"2. Register Events",id:"2-register-events",level:3},{value:"3. Object Events",id:"3-object-events",level:3},{value:"4. File Events",id:"4-file-events",level:3},{value:"5. Validation Events",id:"5-validation-events",level:3},{value:"Example Event",id:"example-event",level:2},{value:"Event-Driven Architecture",id:"event-driven-architecture",level:2},{value:"1. Loose Coupling",id:"1-loose-coupling",level:3},{value:"2. Extensibility",id:"2-extensibility",level:3},{value:"3. Scalability",id:"3-scalability",level:3},{value:"4. Observability",id:"4-observability",level:3},{value:"Working with Events",id:"working-with-events",level:2},{value:"Listening to Events",id:"listening-to-events",level:3},{value:"Registering Event Listeners",id:"registering-event-listeners",level:3},{value:"Dispatching Events",id:"dispatching-events",level:3},{value:"Event Relationships",id:"event-relationships",level:2},{value:"Events and Objects",id:"events-and-objects",level:3},{value:"Events and Schemas",id:"events-and-schemas",level:3},{value:"Events and Registers",id:"events-and-registers",level:3},{value:"Events and Files",id:"events-and-files",level:3},{value:"Use Cases",id:"use-cases",level:2},{value:"1. Integration",id:"1-integration",level:3},{value:"2. Workflow Automation",id:"2-workflow-automation",level:3},{value:"3. Audit and Compliance",id:"3-audit-and-compliance",level:3},{value:"4. Custom Business Logic",id:"4-custom-business-logic",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Conclusion",id:"conclusion",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"events",children:"Events"})}),"\n",(0,s.jsx)(n.h2,{id:"what-are-events-in-open-register",children:"What are Events in Open Register?"}),"\n",(0,s.jsxs)(n.p,{children:["In Open Register, ",(0,s.jsx)(n.strong,{children:"Events"})," are notifications that are triggered when significant actions occur within the system. They form the foundation of Open Register's event-driven architecture, enabling loose coupling between components while facilitating rich integration possibilities."]}),"\n",(0,s.jsx)(n.p,{children:"Events in Open Register are:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Triggered automatically at key points in the application lifecycle"}),"\n",(0,s.jsx)(n.li,{children:"Standardized messages containing relevant data about what occurred"}),"\n",(0,s.jsx)(n.li,{children:"Available for other components to listen and respond to"}),"\n",(0,s.jsx)(n.li,{children:"Essential for building extensible, integrated systems"}),"\n",(0,s.jsx)(n.li,{children:"Compatible with Nextcloud's event dispatcher system"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"event-structure",children:"Event Structure"}),"\n",(0,s.jsx)(n.p,{children:"An event in Open Register consists of the following key components:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Component"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Event Class"}),(0,s.jsx)(n.td,{children:"The PHP class that defines the event type"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Event Data"}),(0,s.jsx)(n.td,{children:"The data payload carried by the event"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Timestamp"}),(0,s.jsx)(n.td,{children:"When the event occurred"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Source"}),(0,s.jsx)(n.td,{children:"The component that triggered the event"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Context"}),(0,s.jsx)(n.td,{children:"Additional contextual information"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"event-categories",children:"Event Categories"}),"\n",(0,s.jsx)(n.p,{children:"Open Register provides several categories of events:"}),"\n",(0,s.jsx)(n.h3,{id:"1-schema-events",children:"1. Schema Events"}),"\n",(0,s.jsx)(n.p,{children:"Events related to schema lifecycle:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"SchemaCreatedEvent"}),": Triggered when a new schema is created"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"SchemaUpdatedEvent"}),": Triggered when a schema is updated"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"SchemaDeletedEvent"}),": Triggered when a schema is deleted"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-register-events",children:"2. Register Events"}),"\n",(0,s.jsx)(n.p,{children:"Events related to register lifecycle:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"RegisterCreatedEvent"}),": Triggered when a new register is created"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"RegisterUpdatedEvent"}),": Triggered when a register is updated"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"RegisterDeletedEvent"}),": Triggered when a register is deleted"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"3-object-events",children:"3. Object Events"}),"\n",(0,s.jsx)(n.p,{children:"Events related to object lifecycle:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ObjectCreatedEvent"}),": Triggered when a new object is created"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ObjectUpdatedEvent"}),": Triggered when an object is updated"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ObjectDeletedEvent"}),": Triggered when an object is deleted"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"4-file-events",children:"4. File Events"}),"\n",(0,s.jsx)(n.p,{children:"Events related to file operations:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"FileUploadedEvent"}),": Triggered when a file is uploaded"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"FileUpdatedEvent"}),": Triggered when a file is updated"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"FileDeletedEvent"}),": Triggered when a file is deleted"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"5-validation-events",children:"5. Validation Events"}),"\n",(0,s.jsx)(n.p,{children:"Events related to validation:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ValidationSucceededEvent"}),": Triggered when validation succeeds"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ValidationFailedEvent"}),": Triggered when validation fails"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example-event",children:"Example Event"}),"\n",(0,s.jsxs)(n.p,{children:["Here's an example of an ",(0,s.jsx)(n.code,{children:"ObjectCreatedEvent"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"namespace OCA\\OpenRegister\\Event;\n\nuse OCA\\OpenRegister\\Entity\\ObjectEntity;\nuse OCP\\EventDispatcher\\Event;\n\nclass ObjectCreatedEvent extends Event {\n    private ObjectEntity $object;\n\n    public function __construct(ObjectEntity $object) {\n        parent::__construct();\n        $this->object = $object;\n    }\n\n    public function getObject(): ObjectEntity {\n        return $this->object;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"event-driven-architecture",children:"Event-Driven Architecture"}),"\n",(0,s.jsx)(n.p,{children:"Open Register uses an event-driven architecture to provide several benefits:"}),"\n",(0,s.jsx)(n.h3,{id:"1-loose-coupling",children:"1. Loose Coupling"}),"\n",(0,s.jsx)(n.p,{children:"Components can interact without direct dependencies:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The event publisher doesn't need to know who is listening"}),"\n",(0,s.jsx)(n.li,{children:"Listeners can be added or removed without changing the publisher"}),"\n",(0,s.jsx)(n.li,{children:"Different parts of the system can evolve independently"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-extensibility",children:"2. Extensibility"}),"\n",(0,s.jsx)(n.p,{children:"The event system makes Open Register highly extensible:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"New functionality can be added by listening to existing events"}),"\n",(0,s.jsx)(n.li,{children:"Third-party applications can integrate without modifying core code"}),"\n",(0,s.jsx)(n.li,{children:"Custom business logic can be implemented through event listeners"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"3-scalability",children:"3. Scalability"}),"\n",(0,s.jsx)(n.p,{children:"Event-driven architectures support better scalability:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Processing can be distributed across different components"}),"\n",(0,s.jsx)(n.li,{children:"Asynchronous handling allows for better resource management"}),"\n",(0,s.jsx)(n.li,{children:"Event queues can buffer processing during peak loads"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"4-observability",children:"4. Observability"}),"\n",(0,s.jsx)(n.p,{children:"Events provide better system observability:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"System activities can be monitored through events"}),"\n",(0,s.jsx)(n.li,{children:"Audit trails can be built by capturing events"}),"\n",(0,s.jsx)(n.li,{children:"Debugging is easier with a clear event timeline"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"working-with-events",children:"Working with Events"}),"\n",(0,s.jsx)(n.h3,{id:"listening-to-events",children:"Listening to Events"}),"\n",(0,s.jsx)(n.p,{children:"To listen to events in Open Register, you need to:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Create an event listener class"}),"\n",(0,s.jsx)(n.li,{children:"Register it with Nextcloud's event dispatcher"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Here's an example of a listener for ",(0,s.jsx)(n.code,{children:"ObjectCreatedEvent"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"namespace OCA\\MyApp\\Listener;\n\nuse OCA\\OpenRegister\\Event\\ObjectCreatedEvent;\nuse OCP\\EventDispatcher\\Event;\nuse OCP\\EventDispatcher\\IEventListener;\n\nclass ObjectCreatedListener implements IEventListener {\n    public function handle(Event $event): void {\n        if (!($event instanceof ObjectCreatedEvent)) {\n            return;\n        }\n        \n        $object = $event->getObject();\n        // Perform actions with the new object\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"registering-event-listeners",children:"Registering Event Listeners"}),"\n",(0,s.jsxs)(n.p,{children:["Register your listener in your app's ",(0,s.jsx)(n.code,{children:"Application.php"})," file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"use OCA\\OpenRegister\\Event\\ObjectCreatedEvent;\nuse OCA\\MyApp\\Listener\\ObjectCreatedListener;\nuse OCP\\EventDispatcher\\IEventDispatcher;\n\n// In the register() method:\n$dispatcher = $this->getContainer()->get(IEventDispatcher::class);\n$dispatcher->addServiceListener(ObjectCreatedEvent::class, ObjectCreatedListener::class);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"dispatching-events",children:"Dispatching Events"}),"\n",(0,s.jsx)(n.p,{children:"If you're extending Open Register, you might need to dispatch your own events:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"use OCA\\OpenRegister\\Event\\CustomEvent;\nuse OCP\\EventDispatcher\\IEventDispatcher;\n\n// Inject the event dispatcher\nprivate IEventDispatcher $eventDispatcher;\n\npublic function __construct(IEventDispatcher $eventDispatcher) {\n    $this->eventDispatcher = $eventDispatcher;\n}\n\n// Dispatch an event\npublic function performAction() {\n    // Do something\n    $event = new CustomEvent($data);\n    $this->eventDispatcher->dispatch(CustomEvent::class, $event);\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"event-relationships",children:"Event Relationships"}),"\n",(0,s.jsx)(n.p,{children:"Events have important relationships with other core concepts:"}),"\n",(0,s.jsx)(n.h3,{id:"events-and-objects",children:"Events and Objects"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Events are triggered by changes to objects"}),"\n",(0,s.jsx)(n.li,{children:"Events carry object data"}),"\n",(0,s.jsx)(n.li,{children:"Events enable tracking object lifecycle"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"events-and-schemas",children:"Events and Schemas"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Schema changes trigger events"}),"\n",(0,s.jsx)(n.li,{children:"Events can be used to validate schema compatibility"}),"\n",(0,s.jsx)(n.li,{children:"Events enable schema evolution tracking"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"events-and-registers",children:"Events and Registers"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Register operations trigger events"}),"\n",(0,s.jsx)(n.li,{children:"Events can be used to monitor register usage"}),"\n",(0,s.jsx)(n.li,{children:"Events enable register lifecycle management"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"events-and-files",children:"Events and Files"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"File operations trigger events"}),"\n",(0,s.jsx)(n.li,{children:"Events carry file metadata"}),"\n",(0,s.jsx)(n.li,{children:"Events enable file processing workflows"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,s.jsx)(n.h3,{id:"1-integration",children:"1. Integration"}),"\n",(0,s.jsx)(n.p,{children:"Use events to integrate with other systems:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Sync data with external systems"}),"\n",(0,s.jsx)(n.li,{children:"Trigger notifications in messaging platforms"}),"\n",(0,s.jsx)(n.li,{children:"Update search indexes"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-workflow-automation",children:"2. Workflow Automation"}),"\n",(0,s.jsx)(n.p,{children:"Build automated workflows:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Generate documents when objects are created"}),"\n",(0,s.jsx)(n.li,{children:"Send approval requests when objects are updated"}),"\n",(0,s.jsx)(n.li,{children:"Archive data when objects are deleted"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"3-audit-and-compliance",children:"3. Audit and Compliance"}),"\n",(0,s.jsx)(n.p,{children:"Implement audit and compliance features:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Log all changes to sensitive data"}),"\n",(0,s.jsx)(n.li,{children:"Track who did what and when"}),"\n",(0,s.jsx)(n.li,{children:"Generate compliance reports"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"4-custom-business-logic",children:"4. Custom Business Logic"}),"\n",(0,s.jsx)(n.p,{children:"Implement custom business logic:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Validate complex business rules"}),"\n",(0,s.jsx)(n.li,{children:"Enforce data quality standards"}),"\n",(0,s.jsx)(n.li,{children:"Implement approval workflows"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Keep Listeners Focused"}),": Each listener should have a single responsibility"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Handle Errors Gracefully"}),": Listeners should not break the system if they fail"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Consider Performance"}),": Heavy processing should be done asynchronously"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Document Events"}),": Clearly document what events are available and when they're triggered"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Version Events"}),": Consider versioning events to handle changes over time"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Test Event Handling"}),": Write tests for event listeners"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Monitor Event Flow"}),": Implement monitoring for event processing"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"Events in Open Register provide a powerful mechanism for extending functionality, integrating with other systems, and building loosely coupled architectures. By leveraging the event-driven approach, you can create flexible, scalable applications that can evolve over time while maintaining a clean separation of concerns."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>c});var i=t(6540);const s={},r=i.createContext(s);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);