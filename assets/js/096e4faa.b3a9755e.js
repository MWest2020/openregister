"use strict";(self.webpackChunkopen_register_docs=self.webpackChunkopen_register_docs||[]).push([[97],{5680:(e,t,r)=>{r.d(t,{xA:()=>p,yg:()=>m});var a=r(6540);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),g=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=g(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=g(r),u=n,m=c["".concat(l,".").concat(u)]||c[u]||d[u]||i;return r?a.createElement(m,s(s({ref:t},p),{},{components:r})):a.createElement(m,s({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,s=new Array(i);s[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:n,s[1]=o;for(var g=2;g<i;g++)s[g]=r[g];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},6006:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>g});var a=r(8168),n=(r(6540),r(5680));const i={title:"Registers",sidebar_position:2},s="Registers",o={unversionedId:"Core/registers",id:"Core/registers",title:"Registers",description:"What is a Register?",source:"@site/docs/Core/registers.md",sourceDirName:"Core",slug:"/Core/registers",permalink:"/docs/Core/registers",draft:!1,editUrl:"https://github.com/conductionnl/openregister/tree/main/website/docs/Core/registers.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Registers",sidebar_position:2},sidebar:"tutorialSidebar",next:{title:"Schemas",permalink:"/docs/Core/schemas"}},l={},g=[{value:"What is a Register?",id:"what-is-a-register",level:2},{value:"Register Structure",id:"register-structure",level:2},{value:"Example Register",id:"example-register",level:2},{value:"Register Use Cases",id:"register-use-cases",level:2},{value:"1. Master Data Management",id:"1-master-data-management",level:3},{value:"2. Domain-Specific Data Collections",id:"2-domain-specific-data-collections",level:3},{value:"3. Integration Hubs",id:"3-integration-hubs",level:3},{value:"Working with Registers",id:"working-with-registers",level:2},{value:"Creating a Register",id:"creating-a-register",level:3},{value:"Retrieving Register Information",id:"retrieving-register-information",level:3},{value:"Updating a Register",id:"updating-a-register",level:3},{value:"Deleting a Register",id:"deleting-a-register",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Relationship to Other Concepts",id:"relationship-to-other-concepts",level:2},{value:"Conclusion",id:"conclusion",level:2}],p={toc:g},c="wrapper";function d(e){let{components:t,...r}=e;return(0,n.yg)(c,(0,a.A)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"registers"},"Registers"),(0,n.yg)("h2",{id:"what-is-a-register"},"What is a Register?"),(0,n.yg)("p",null,"In Open Register, a ",(0,n.yg)("strong",{parentName:"p"},"Register")," is a specialized container that holds objects conforming to specific schemas. You can think of a register as:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"A ",(0,n.yg)("strong",{parentName:"li"},"collection")," of related data objects"),(0,n.yg)("li",{parentName:"ul"},"A ",(0,n.yg)("strong",{parentName:"li"},"domain-specific database")," focused on a particular subject area"),(0,n.yg)("li",{parentName:"ul"},"A ",(0,n.yg)("strong",{parentName:"li"},"logical grouping")," of information with common validation rules")),(0,n.yg)("p",null,"Registers provide a way to organize data by purpose, domain, or function, making it easier to manage and retrieve related information."),(0,n.yg)("h2",{id:"register-structure"},"Register Structure"),(0,n.yg)("p",null,"A register consists of the following key components:"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Property"),(0,n.yg)("th",{parentName:"tr",align:null},"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"id")),(0,n.yg)("td",{parentName:"tr",align:null},"Unique identifier for the register")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"title")),(0,n.yg)("td",{parentName:"tr",align:null},"Human-readable name of the register")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"description")),(0,n.yg)("td",{parentName:"tr",align:null},"Detailed explanation of the register's purpose")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"schemas")),(0,n.yg)("td",{parentName:"tr",align:null},"Array of schema IDs that this register supports")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"source")),(0,n.yg)("td",{parentName:"tr",align:null},"The data source identifier for storage")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"databaseId")),(0,n.yg)("td",{parentName:"tr",align:null},"Database identifier where register data is stored")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"tablePrefix")),(0,n.yg)("td",{parentName:"tr",align:null},"Prefix for database tables used by this register")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"updated")),(0,n.yg)("td",{parentName:"tr",align:null},"Timestamp of last update")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"created")),(0,n.yg)("td",{parentName:"tr",align:null},"Timestamp of creation")))),(0,n.yg)("h2",{id:"example-register"},"Example Register"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "id": "person-register",\n  "title": "Person Register",\n  "description": "Central register for person data across the organization",\n  "schemas": ["person", "address", "contact-details"],\n  "source": "primary-source",\n  "databaseId": "main-db",\n  "tablePrefix": "person_",\n  "updated": "2023-05-15T14:30:00Z",\n  "created": "2023-01-10T09:15:00Z"\n}\n')),(0,n.yg)("h2",{id:"register-use-cases"},"Register Use Cases"),(0,n.yg)("p",null,"Registers can be used for various purposes:"),(0,n.yg)("h3",{id:"1-master-data-management"},"1. Master Data Management"),(0,n.yg)("p",null,"Create registers for core business entities like customers, products, or locations to ensure a single source of truth."),(0,n.yg)("h3",{id:"2-domain-specific-data-collections"},"2. Domain-Specific Data Collections"),(0,n.yg)("p",null,"Organize data by business domains such as:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"HR Register (employees, departments, positions)"),(0,n.yg)("li",{parentName:"ul"},"Financial Register (accounts, transactions, budgets)"),(0,n.yg)("li",{parentName:"ul"},"Product Register (products, categories, specifications)")),(0,n.yg)("h3",{id:"3-integration-hubs"},"3. Integration Hubs"),(0,n.yg)("p",null,"Use registers as integration points between different systems, providing a standardized way to exchange data."),(0,n.yg)("h2",{id:"working-with-registers"},"Working with Registers"),(0,n.yg)("h3",{id:"creating-a-register"},"Creating a Register"),(0,n.yg)("p",null,"To create a new register, you need to define its basic properties and specify which schemas it will support:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-json"},'POST /api/registers\n{\n  "title": "Customer Register",\n  "description": "Central repository for customer information",\n  "schemas": ["customer", "address", "preference"],\n  "source": "primary-source",\n  "databaseId": "customer-db"\n}\n')),(0,n.yg)("h3",{id:"retrieving-register-information"},"Retrieving Register Information"),(0,n.yg)("p",null,"You can retrieve information about a specific register:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre"},"GET /api/registers/{id}\n")),(0,n.yg)("p",null,"Or list all available registers:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre"},"GET /api/registers\n")),(0,n.yg)("h3",{id:"updating-a-register"},"Updating a Register"),(0,n.yg)("p",null,"Registers can be updated to add or remove supported schemas or change other properties:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-json"},'PUT /api/registers/{id}\n{\n  "title": "Customer Register",\n  "description": "Updated repository for customer information",\n  "schemas": ["customer", "address", "preference", "communication-history"],\n  "source": "primary-source",\n  "databaseId": "customer-db"\n}\n')),(0,n.yg)("h3",{id:"deleting-a-register"},"Deleting a Register"),(0,n.yg)("p",null,"Registers can be deleted when no longer needed:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre"},"DELETE /api/registers/{id}\n")),(0,n.yg)("h2",{id:"best-practices"},"Best Practices"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"Logical Grouping"),": Create registers around logical domains or business functions"),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"Clear Naming"),": Use clear, descriptive names for registers"),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"Documentation"),": Provide detailed descriptions of each register's purpose"),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"Schema Selection"),": Carefully select which schemas belong in each register"),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"Access Control"),": Define appropriate access controls for each register")),(0,n.yg)("h2",{id:"relationship-to-other-concepts"},"Relationship to Other Concepts"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Schemas"),": Registers specify which schemas they support, defining what types of objects can be stored"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Objects"),": Objects are stored within registers and must conform to one of the register's supported schemas"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Sources"),": Registers use sources to determine where and how their data is stored")),(0,n.yg)("h2",{id:"conclusion"},"Conclusion"),(0,n.yg)("p",null,"Registers are a fundamental organizing principle in Open Register, providing structure and context for your data. By grouping related schemas and objects into registers, you create a more manageable and intuitive data architecture that aligns with your business domains."))}d.isMDXComponent=!0}}]);